#!/usr/bin/env python

import rospy
import std_msgs
from gps_to_path.msg import MagShift
from sensor_msgs.msg import MagneticField



class MagShiftCalc():
    def __init__(self,measuring_time):
        
        self.x_min = None
        self.y_min = None
        self.z_min = None

        self.x_max = None
        self.y_max = None
        self.z_max = None
        
        self.x_mean = None
        self.y_mean = None
        self.z_mean = None

        self.msg = MagShift()

        self.measuring_time = measuring_time
        self.finish_measuring_time = rospy.Time.now() + self.measuring_time

        self.pub = rospy.Publisher('mag_shift', MagShift, queue_size=10)
        self.sub = rospy.Subscriber('/imu/mag', MagneticField, self.mag_callback)
    
    def mag_callback(self,msg):
        if rospy.Time.now() < self.finish_measuring_time:
            mag = msg.magnetic_field

            if mag[0] > self.x_max:
                self.x_max = mag[0]
            elif mag[0] < self.x_min:
                self.x_min = mag[0]

            if mag[1] > self.y_max:
                self.y_max = mag[1]
            elif mag[1] < self.y_min:
                self.y_min = mag[1]

            if mag[2] > self.z_max:
                self.z_max = mag[2]
            elif mag[2] < self.z_min:
                self.z_min = mag[2]
        
            self.set_means()
        else:
            rospy.loginfo_once("Finished measuring ")

        self.pub_msg()
        
    def set_means(self):
        self.x_mean = (self.x_min + self.x_max)/2
        self.y_mean = (self.y_min + self.y_max)/2
        self.z_mean = (self.z_min + self.z_max)/2

    def pub_msg(self):
        header = std_msgs.msg.Header()
        header.stamp = rospy.Time.now()
        header.frame_id = "imu"
        
        self.msg.header = header

        self.msg.x_mean = self.x_mean
        self.msg.y_mean = self.y_mean
        self.msg.z_mean = self.z_mean

        self.pub.publish(self.msg)
    
    def run(self):
        rospy.spin()

def main():
    rospy.init_node('mag_shift')

    measuring_time = rospy.get_param('~measuring_time', 30)
    node = MagShiftCalc(measuring_time)
    node.run()

if __name__ == '__main__':
    main()
