#!/usr/bin/env python
"""Publish waypoint control commands from joy messages.

It increments or decrements the waypoint index if the respective set of buttons
is pressed.
"""
import rospy
from sensor_msgs.msg import Joy
from std_msgs.msg import Int8


class JoyWaypointControl(object):

    def __init__(self):
        self.max_age = rospy.get_param('~max_age', 1.0)
        rospy.loginfo("Max age of joy messages: %.3g s.", self.max_age)
        self.step = rospy.get_param('~step', 1)
        rospy.loginfo("Waypoint increment / decrement step: %i.", self.step)

        self.decrement_buttons = rospy.get_param('~decrement_buttons', [2])
        if isinstance(self.decrement_buttons, int):
            self.decrement_buttons = [self.decrement_buttons]
        rospy.loginfo('Joy buttons for decrementing waypoint index: %s.',
                      ', '.join(['%i' % b for b in self.decrement_buttons]))

        self.increment_buttons = rospy.get_param('~increment_buttons', [1])
        if isinstance(self.increment_buttons, int):
            self.increment_buttons = [self.increment_buttons]
        rospy.loginfo('Joy buttons for incrementing waypoint index: %s.',
                      ', '.join(['%i' % b for b in self.increment_buttons]))

        # Previous "previous waypoint", "next waypoint" action state.
        self.prev_state = None  # (False, False)

        self.ctr_pub = rospy.Publisher('waypoint', Int8, queue_size=1)
        self.joy_sub = rospy.Subscriber("joy", Joy, self.on_joy, queue_size=1)

    def decrement_buttons_active(self, msg):
        assert isinstance(msg, Joy)
        return all(msg.buttons[i] for i in self.decrement_buttons)

    def increment_buttons_active(self, msg):
        assert isinstance(msg, Joy)
        return all(msg.buttons[i] for i in self.increment_buttons)

    def on_joy(self, msg):
        assert isinstance(msg, Joy)
        age = (rospy.Time.now() - msg.header.stamp).to_sec()
        if age > self.max_age:
            rospy.loginfo_throttle(5.0, 'Joy message too old: %.3g s > %.3g s.',
                                   age, self.max_age)
            return

        state = self.decrement_buttons_active(msg), self.increment_buttons_active(msg)

        if not self.prev_state:
            self.prev_state = state
            return

        if state == (True, False) and self.prev_state == (False, False):
            self.ctr_pub.publish(-self.step)
            rospy.loginfo("Waypoint index decremented by %i.", self.step)
        elif state == (False, True) and self.prev_state == (False, False):
            self.ctr_pub.publish(self.step)
            rospy.loginfo("Waypoint index incremented by %i.", self.step)
        elif any(state) and state != self.prev_state:
            rospy.loginfo("Invalid state transition: %s -> %s.", self.prev_state, state)

        self.prev_state = state


def main():
    rospy.init_node("joy_waypoint_control")
    node = JoyWaypointControl()
    rospy.spin()


if __name__ == "__main__":
    main()
