#!/usr/bin/env python

# Convert a NavSatFix message to a pose in UTM frame.
# Author: Martin Pecka
# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Czech Technical University in Prague

import rospy

import utm

from geometry_msgs.msg import PoseWithCovarianceStamped
from sensor_msgs.msg import NavSatFix


def cb(msg):
    assert isinstance(msg, NavSatFix)
    pose = PoseWithCovarianceStamped()
    pose.header = msg.header
    pose.header.frame_id = utm_frame
    easting, northing, _, _ = utm.from_latlon(msg.latitude, msg.longitude)
    pose.pose.pose.position.x = easting
    pose.pose.pose.position.y = northing
    pose.pose.pose.position.z = msg.altitude
    pose.pose.pose.orientation.w = 1
    pose.pose.covariance[0 * 6 + 0] = msg.position_covariance[0 * 3 + 0]
    pose.pose.covariance[0 * 6 + 1] = msg.position_covariance[0 * 3 + 1]
    pose.pose.covariance[0 * 6 + 2] = msg.position_covariance[0 * 3 + 2]
    pose.pose.covariance[1 * 6 + 0] = msg.position_covariance[1 * 3 + 0]
    pose.pose.covariance[1 * 6 + 1] = msg.position_covariance[1 * 3 + 1]
    pose.pose.covariance[1 * 6 + 2] = msg.position_covariance[1 * 3 + 2]
    pose.pose.covariance[2 * 6 + 0] = msg.position_covariance[2 * 3 + 0]
    pose.pose.covariance[2 * 6 + 1] = msg.position_covariance[2 * 3 + 1]
    pose.pose.covariance[2 * 6 + 2] = msg.position_covariance[2 * 3 + 2]
    pub.publish(pose)


if __name__ == '__main__':
    rospy.init_node('fix_to_utm_pose')

    utm_frame = rospy.get_param('~utm_frame', 'utm')
    pub = rospy.Publisher('~pose', PoseWithCovarianceStamped, queue_size=10)
    sub = rospy.Subscriber('~fix', NavSatFix, cb, queue_size=10)

    rospy.spin()
