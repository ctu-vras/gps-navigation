#!/usr/bin/env python

import rospy
import tf2_ros

from nav_msgs.msg import Path
import geometry_msgs.msg
import std_msgs.msg
from sensor_msgs.msg import NavSatFix
from sound_play.msg import SoundRequest
from sound_play.libsoundplay import SoundClient

from geodesy import utm
import datetime
import time
import re
import serial
from math import sqrt, sin, cos

from tf.transformations import euler_from_quaternion


class GPSData():
    def __init__(self):
        self.time = 0.
        self.lat = 0.
        self.long = 0.
        self.fix = 0
        self.satellites = 0
        self.lat_cov = 0.
        self.long_cov = 0.

    def from_array(self, data):
        self.time = data[0]
        self.lat = float(data[1])
        self.long = float(data[2])
        self.alt = float(data[3])
        self.fix = data[4]
        self.satellites = data[5]
        self.lat_cov = float(data[6])**2
        self.long_cov = float(data[7])**2
        self.alt_cov = float(data[8])**2


class LlhToFix():
    def __init__(self, GPS, sound_period):
        self.pub_path = rospy.Publisher('fix', NavSatFix, queue_size=10)
        self.fix_msg = NavSatFix()
        self.GPS = GPS
        self.gps_data = GPSData()

        self.sound_handle = SoundClient()
        self.last_sound_time = 0
        self.last_llh_msg_time = 0
        self.sound_period = sound_period
        self.sound_string = "Fix covariance is {}"
	self.no_fix_msg_period = 1

    def set_fix_msg(self):
        header = std_msgs.msg.Header()
        header.stamp = rospy.Time.now()  # float(self.gps_data.time)
        header.frame_id = "gps"

        self.fix_msg.header = header

        self.fix_msg.latitude = self.gps_data.lat
        self.fix_msg.longitude = self.gps_data.long
        self.fix_msg.altitude = self.gps_data.alt

        self.fix_msg.status.status = 0
        self.fix_msg.status.service = 1

        self.fix_msg.position_covariance = [self.gps_data.long_cov, 0., 0.,
                                            0., self.gps_data.lat_cov, 0.,
                                            0., 0., self.gps_data.alt_cov]

        if rospy.Time.now().to_sec() - self.last_sound_time >= self.sound_period:
            self.last_sound_time = rospy.Time.now().to_sec()

            fix_cov = (self.gps_data.long_cov + self.gps_data.lat_cov)/2
            if fix_cov < 1:
                cov_str = "under one meter."
            else:
                cov_str = str(round(fix_cov))

            voice_msg = self.sound_handle.voiceSound(self.sound_string.format(cov_str))
            rospy.loginfo(self.sound_string.format(cov_str))
            voice_msg.play()

    def date_to_timestamp(self, date):
        ts = time.mktime(datetime.datetime.strptime(
            date, "%Y/%m/%d,%H:%M:%S.%f").timetuple())
        return ts

    def parse_data(self, llh_sentence):
        llh_contents = re.sub(' +', ' ', llh_sentence).strip()
        llh_commas = llh_contents.replace(' ', ',')
        llh_arr = llh_commas.split(',')

        date = llh_arr[0]+','+llh_arr[1]
        ts = self.date_to_timestamp(date)
        ts = str(ts)
        llh_arr.pop(0)
        llh_arr[0] = ts
        self.gps_data.from_array(llh_arr)

    def run(self):
        rate = rospy.Rate(50)
        while not rospy.is_shutdown():
            llh_sentence = self.GPS.readline().strip()
            if llh_sentence:
                llh_sentence = llh_sentence.decode('ascii')
                self.parse_data(llh_sentence)
                self.set_fix_msg()
                self.pub_path.publish(self.fix_msg)

                self.last_llh_msg_time = rospy.Time.now().to_sec()
                self.no_fix_msg_period = 1
            else:
                if rospy.Time.now().to_sec() - self.last_llh_msg_time >= self.no_fix_msg_period:
                    self.last_llh_msg_time = rospy.Time.now().to_sec()
                    self.no_fix_msg_period = 5

                    voice_msg = self.sound_handle.voiceSound("No fix.")
                    rospy.loginfo("No fix.")
                    voice_msg.play()

                rate.sleep()


def main():
    rospy.init_node('llh_to_fix')

    GPS = None

    rate = rospy.Rate(10)

    sound_period = rospy.get_param('~sound_period', 10)

    while not GPS:
        try:
            serial_port = rospy.get_param('~port', '/dev/ttyACM0')
            serial_baud = rospy.get_param('~baud', 115200)
            GPS = serial.Serial(
                port=serial_port, baudrate=serial_baud, timeout=2)
        except:
            print("Serial port {} with baudrate {} cannot be opened.".format(
                serial_port, serial_baud))
        rate.sleep()

    node = LlhToFix(GPS,sound_period)

    node.run()


if __name__ == '__main__':
    main()
