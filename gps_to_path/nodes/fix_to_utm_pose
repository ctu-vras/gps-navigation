#!/usr/bin/env python

# Convert a NavSatFix message to a pose in UTM frame.
# Author: Martin Pecka
# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Czech Technical University in Prague

import rospy

import utm

from geometry_msgs.msg import PoseWithCovarianceStamped
from sensor_msgs.msg import NavSatFix


def cb(msg):
    assert isinstance(msg, NavSatFix)
    global first
    global last_stamp
    if last_stamp is not None and last_stamp > msg.header.stamp + rospy.Duration(3):
        rospy.logwarn("ROS time jumped back, resetting")
        last_stamp = None
        first = None
    last_stamp = msg.header.stamp
    pose = PoseWithCovarianceStamped()
    pose.header = msg.header
    pose.header.frame_id = utm_frame

    easting, northing, _, _ = utm.from_latlon(msg.latitude, msg.longitude)
    altitude = msg.altitude

    if first is None:
        first = easting, northing, altitude
        rospy.loginfo("Subtracting UTM pose %r from all data." % (first,))
    if subtract_first:
        easting -= first[0]
        northing -= first[1]
        altitude -= first[2]

    pose.pose.pose.position.x = -northing if nwu else easting
    pose.pose.pose.position.y = easting if nwu else northing
    pose.pose.pose.position.z = altitude

    pose.pose.pose.orientation.w = 1
    pose.pose.covariance[0 * 6 + 0] = msg.position_covariance[0 * 3 + 0]
    pose.pose.covariance[0 * 6 + 1] = msg.position_covariance[0 * 3 + 1]
    pose.pose.covariance[0 * 6 + 2] = msg.position_covariance[0 * 3 + 2]
    pose.pose.covariance[1 * 6 + 0] = msg.position_covariance[1 * 3 + 0]
    pose.pose.covariance[1 * 6 + 1] = msg.position_covariance[1 * 3 + 1]
    pose.pose.covariance[1 * 6 + 2] = msg.position_covariance[1 * 3 + 2]
    pose.pose.covariance[2 * 6 + 0] = msg.position_covariance[2 * 3 + 0]
    pose.pose.covariance[2 * 6 + 1] = msg.position_covariance[2 * 3 + 1]
    pose.pose.covariance[2 * 6 + 2] = msg.position_covariance[2 * 3 + 2]
    pub.publish(pose)


if __name__ == '__main__':
    rospy.init_node('fix_to_utm_pose')

    utm_frame = rospy.get_param('~utm_frame', 'utm')
    subtract_first = rospy.get_param('~subtract_first', False)
    # NWU is compatible with RViz pose display
    nwu = rospy.get_param('~convert_to_nwu', True)
    first = None
    last_stamp = None
    pub = rospy.Publisher('~pose', PoseWithCovarianceStamped, queue_size=10)
    sub = rospy.Subscriber('~fix', NavSatFix, cb, queue_size=10)

    rospy.spin()
