#!/usr/bin/env python
import math

import rospy
import gpxpy

from sensor_msgs.msg import NavSatFix, NavSatStatus, Joy
from gps_to_path.msg import NavSatDetailedStatus

import random


class FakeGps():

    def __init__(self):
        self.publisher = rospy.Publisher("fix", NavSatFix, queue_size=10)
        self.publisher_status = rospy.Publisher("fix_status", NavSatDetailedStatus, queue_size=10)
        self.gpx_file = rospy.get_param("~gpx_file", None)
        self.gpx_waypoint_nr = int(rospy.get_param("~gpx_waypoint_nr", 0))
        self.msg = NavSatFix()
        self.msg_status = NavSatDetailedStatus()
        self.c = 0
        self.set_msg()
        self.joy_sub = rospy.Subscriber("fake_gps/joy", Joy, self.on_joy, queue_size=1)

    def set_msg(self):
        #self.msg.latitude = 50.0904047 #50.076673857412935
        #self.msg.longitude = 14.1332572 #14.41751975802257
        self.msg.latitude = 50.07656871 #50.076673857412935
        self.msg.longitude = 14.41787879
        #50.0934817N, 14.1322394E
        self.msg.altitude = 200.0

        if self.gpx_file is not None and len(self.gpx_file) > 0:
            with open(self.gpx_file, 'r') as gpx_f:
                gpx_object = gpxpy.parse(gpx_f)
                num_waypoints = len(gpx_object.waypoints)
                if self.gpx_waypoint_nr >= num_waypoints or self.gpx_waypoint_nr < 0:
                    rospy.logwarn("Invalid waypoint index: %i, setting to 0" % (self.gpx_waypoint_nr,))
                    self.gpx_waypoint_nr = 0
                waypoint = gpx_object.waypoints[self.gpx_waypoint_nr]
                self.msg.latitude, self.msg.longitude = waypoint.latitude, waypoint.longitude

        self.c += 1

        self.msg.position_covariance = [0]*9
        self.msg.position_covariance[0] = 1
        self.msg.position_covariance[4] = 1
        self.msg.position_covariance[8] = 1

        self.msg.header.stamp = rospy.Time.now()
        self.msg.header.frame_id = "gps"
        self.msg.status.status = NavSatStatus.STATUS_FIX
        self.msg.status.service = NavSatStatus.SERVICE_GPS

        self.msg_status.header = self.msg.header
        self.msg_status.integer_ambiguity_ratio = 2.0
        self.msg_status.satellites_used = 20
        self.msg_status.last_corrections_time = rospy.Time.now()
        self.msg_status.gps_time.header = self.msg.header
        self.msg_status.gps_time.time_ref = rospy.Time.now()

    def update_message(self):
        self.msg.header.stamp = rospy.Time.now()
        self.msg_status.header.stamp = rospy.Time.now()
        self.msg_status.last_corrections_time = rospy.Time.now()
        self.msg_status.gps_time.time_ref = rospy.Time.now()
        #self.msg.latitude += 0.000001 * random.random()
        #self.msg.longitude += 0.000001 * random.random()

    def on_joy(self, msg):
        self.msg.latitude += 1e-5 * msg.axes[0]  # left joy left-right
        self.msg.longitude += 1e-5 * msg.axes[1]  # left joy top-down
        self.msg.altitude += 10 * msg.axes[4]  # right joy top-down
        if msg.axes[6] != 0:  # d-pad left-right
            self.msg.position_covariance[0] *= math.pow(2, msg.axes[6])
        if msg.axes[7] != 0:  # d-pad top-down
            self.msg.position_covariance[4] *= math.pow(2, msg.axes[7])
        if msg.buttons[0] != 0 or msg.buttons[3] != 0:  # A/Y
            self.msg.position_covariance[8] *= math.pow(2, msg.buttons[3] - msg.buttons[0])

    def run(self):
        rate = rospy.Rate(5)
        while not rospy.is_shutdown():
            self.update_message()
            self.publisher.publish(self.msg)
            self.publisher_status.publish(self.msg_status)
            rate.sleep()


if __name__ == "__main__":
    rospy.init_node("fake_gps")
    node = FakeGps()
    node.run()
