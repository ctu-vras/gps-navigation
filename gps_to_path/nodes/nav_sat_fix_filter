#!/usr/bin/env python

# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Czech Technical University in Prague

"""
This node imposes a minimum limit on the covariance of GPS measurements. This can be used to limit jitter of a fused
odometry caused by the very accurate, but still jumping measurements. It also filters some susceptible values of fix.

It can either subscribe to :class:`sensor_msgs.msg.NavSatFix` messages alone, or to these messages accompanied by
:class:`gps_to_path.msg.NavSatDetailedStatus` messages. It automatically tries to subscribe to both, and when it detects
that the detailed status messages are available, it only uses the algorithm that takes the detailed status into account.
"""
import math
from collections import deque
import numpy as np
from threading import Lock
import utm
from geometry_msgs.msg import PoseStamped

from gps_to_path.msg import NavSatDetailedStatus, NavSatFixQuality
from message_filters import TimeSynchronizer, Subscriber
import rospy
from sensor_msgs.msg import NavSatFix, NavSatStatus

state_names = {
    NavSatFixQuality.STATE_NO_FIX: "NO_FIX",
    NavSatFixQuality.STATE_HAS_FIX: "HAS_FIX",
    NavSatFixQuality.STATE_FIX_RECONVERGING: "FIX_RECONVERGING",
}

fix_quality_names = {
    NavSatFixQuality.QUALITY_OK: "OK",
    NavSatFixQuality.QUALITY_AVERAGE: "AVERAGE",
    NavSatFixQuality.QUALITY_DEGRADED: "DEGRADED",
    NavSatFixQuality.QUALITY_BAD: "BAD",
}

RTK_FIX_STATUSES = (NavSatStatus.STATUS_GBAS_FIX, NavSatStatus.STATUS_SBAS_FIX)


class UtmFix(object):
    def __init__(self, easting, northing, stamp):
        """GPS fix converted to UTM frame.

        :param float easting:
        :param float northing:
        :param rospy.Time stamp:
        """
        self.easting = easting
        self.northing = northing
        self.stamp = stamp


class NavSatFixFilter(object):
    def __init__(self):

        self.min_fix_cov = float(rospy.get_param("~min_fix_cov", 1e-4))
        self.min_float_cov = float(rospy.get_param("~min_float_cov", 1e-2))
        self.max_cov = float(rospy.get_param("~max_cov", 10))

        self.min_fix_lat_cov = float(rospy.get_param("~min_fix_lat_cov", self.min_fix_cov))
        self.min_fix_lon_cov = float(rospy.get_param("~min_fix_lon_cov", self.min_fix_cov))
        self.min_fix_alt_cov = float(rospy.get_param("~min_fix_alt_cov", self.min_fix_cov))

        self.min_float_lat_cov = float(rospy.get_param("~min_float_lat_cov", self.min_float_cov))
        self.min_float_lon_cov = float(rospy.get_param("~min_float_lon_cov", self.min_float_cov))
        self.min_float_alt_cov = float(rospy.get_param("~min_float_alt_cov", self.min_float_cov))

        self.max_velocity = float(rospy.get_param("~max_velocity", 2.0))
        self.nonsense_velocity = float(rospy.get_param("~nonsense_velocity", 3.0 * self.max_velocity))

        self.average_fix_cov_multiplier = float(rospy.get_param("~average_fix_cov_multiplier", 10))
        self.degraded_fix_cov_multiplier = float(rospy.get_param("~degraded_fix_cov_multiplier", 100))

        self.fix_lost_duration = rospy.Duration(rospy.get_param("~fix_lost_duration", 1.0))
        self.fix_reconvergence_duration = rospy.Duration(rospy.get_param("~fix_reconvergence_duration", 20.0))
        self.max_corrections_age = rospy.Duration(rospy.get_param("~max_corrections_age", 10.0))

        self.cov_multipliers = {
            NavSatFixQuality.QUALITY_OK: 1,
            NavSatFixQuality.QUALITY_AVERAGE: self.average_fix_cov_multiplier,
            NavSatFixQuality.QUALITY_DEGRADED: self.degraded_fix_cov_multiplier,
        }

        self.processed_stamps = deque(maxlen=10)
        self.processed_stamps_lock = Lock()
        self.last_cb_stamp = rospy.Time.now()
        self.last_fix = None
        self.forced_fix = None
        self.fix_regained_stamp = None
        self.fix_jumped_stamp = None
        self.state = NavSatFixQuality.STATE_NO_FIX
        self.utm_zone = None
        self.utm_zone_letter = None

        self.pub = rospy.Publisher("gps/fix_filtered", NavSatFix, queue_size=10)
        self.pub_quality = rospy.Publisher("gps/fix_quality", NavSatFixQuality, queue_size=10)

        self.fix_only_sub = rospy.Subscriber("gps/fix", NavSatFix, self.fix_only_cb, queue_size=10)
        fix_sub = Subscriber("gps/fix", NavSatFix, queue_size=10)
        fix_status_sub = Subscriber("gps/fix_status", NavSatDetailedStatus, queue_size=10)
        self.sub = TimeSynchronizer((fix_sub, fix_status_sub), queue_size=10)
        self.sub.registerCallback(self.fix_with_status_cb)
        self.force_pose_sub = rospy.Subscriber("force_pose_utm", PoseStamped, self.force_pose_cb, queue_size=1)

    def fix_only_cb(self, fix_msg):
        """Callback for fix messages without status.

        :param NavSatFix fix_msg: 
        :return: 
        """
        # create a fake status message

        status_msg = NavSatDetailedStatus()
        status_msg.header = fix_msg.header

        satellites_used = {
            NavSatStatus.STATUS_NO_FIX: 0,
            NavSatStatus.STATUS_FIX: 7,
            NavSatStatus.STATUS_SBAS_FIX: 12,
            NavSatStatus.STATUS_GBAS_FIX: 15,
        }
        status_msg.satellites_used = satellites_used[fix_msg.status.status]

        if fix_msg.status.status in RTK_FIX_STATUSES:
            status_msg.last_corrections_time = rospy.Time.now()
            status_msg.integer_ambiguity_ratio = 3.0
        elif fix_msg.status.status == NavSatStatus.STATUS_FIX:
            if max(fix_msg.position_covariance[0], fix_msg.position_covariance[4]) < 0.1:
                status_msg.last_corrections_time = rospy.Time.now()
                status_msg.integer_ambiguity_ratio = 1.3
            else:
                status_msg.last_corrections_time = rospy.Time.now() - rospy.Duration(120) \
                    if rospy.Time.now() > rospy.Time(120) else rospy.Time(0)
                status_msg.integer_ambiguity_ratio = 0

        # run the filter with the fake status message
        filtered_fix, fix_quality = self.filter_fix(fix_msg, status_msg)

        self.republish_fix(filtered_fix, fix_quality, fix_msg.header.stamp)

    def fix_with_status_cb(self, fix_msg, status_msg):
        """Callback for fix messages with status.

        :param NavSatFix fix_msg: 
        :param NavSatDetailedStatus status_msg: 
        """
        # once we get a fix with status, we no longer need the fix_only version
        # calling unregister() repeatedly is not a problem
        self.fix_only_sub.unregister()

        filtered_fix, fix_quality = self.filter_fix(fix_msg, status_msg)

        self.republish_fix(filtered_fix, fix_quality, fix_msg.header.stamp)

    def republish_fix(self, filtered_fix, quality_msg, stamp):
        """Callback for fix messages with status.

        :param NavSatFix filtered_fix: 
        :param NavSatFixQuality quality_msg: 
        :param rospy.Time stamp:
        """
        with self.processed_stamps_lock:
            if stamp not in self.processed_stamps:
                if filtered_fix is not None:
                    self.pub.publish(filtered_fix)
                self.pub_quality.publish(quality_msg)
                self.processed_stamps.append(stamp)
                rospy.loginfo_throttle_identical(60.0, "Fix state: %s, quality: %s. %s" % (
                    state_names[quality_msg.state], fix_quality_names[quality_msg.quality],
                    " ".join(quality_msg.comments)))

    def filter_fix(self, fix_msg, status_msg):
        """Callback for fix messages with status.

        :param NavSatFix fix_msg: 
        :param NavSatDetailedStatus status_msg: 
        """
        fix_quality_msg = NavSatFixQuality()
        fix_quality_msg.header = fix_msg.header
        fix_quality_msg.quality = NavSatFixQuality.QUALITY_BAD
        fix_quality_msg.state = NavSatFixQuality.STATE_NO_FIX
        fix_quality_msg.covariance_multiplier = float('inf')

        if self.last_cb_stamp > rospy.Time.now() + rospy.Duration(3):
            rospy.loginfo("ROS time jumped backwards, resetting.")
            self.last_fix = None
            self.state = NavSatFixQuality.STATE_NO_FIX
            fix_quality_msg.comments.append("ROS time jumped back.")
        self.last_cb_stamp = rospy.Time.now()

        if self.state == NavSatFixQuality.STATE_NO_FIX:
            self.state = NavSatFixQuality.STATE_HAS_FIX

        if self.state == NavSatFixQuality.STATE_HAS_FIX and self.last_fix is not None \
                and fix_msg.header.stamp - self.last_fix.stamp > self.fix_lost_duration:
            self.state = NavSatFixQuality.STATE_FIX_RECONVERGING
            fix_quality_msg.comments.append("Fix lost.")
            self.fix_regained_stamp = fix_msg.header.stamp
            rospy.loginfo("Fix lost")

        if self.state == NavSatFixQuality.STATE_FIX_RECONVERGING and \
                fix_msg.header.stamp > self.fix_regained_stamp + self.fix_reconvergence_duration:
            self.state = NavSatFixQuality.STATE_HAS_FIX
            fix_quality_msg.comments.append("Fix regained.")
            self.fix_regained_stamp = None
            rospy.loginfo("Fix regained")

        x, y, self.utm_zone, self.utm_zone_letter = utm.from_latlon(
            fix_msg.latitude, fix_msg.longitude, self.utm_zone, self.utm_zone_letter)

        fix_is_jumping = False
        if self.last_fix is not None:
            last_x, last_y = self.last_fix.easting, self.last_fix.northing
            distance = np.linalg.norm([x - last_x, y - last_y])
            dt = (fix_msg.header.stamp - self.last_fix.stamp).to_sec()
            velocity = distance / dt if dt > 1e-9 else 0.0
            if velocity > self.nonsense_velocity:
                self.state = NavSatFixQuality.STATE_FIX_RECONVERGING
                self.fix_regained_stamp = fix_msg.header.stamp
                fix_is_jumping = True
                fix_quality_msg.comments.append("Nonsensical large jump in distance detected.")
            elif velocity > self.max_velocity:
                fix_is_jumping = True
                self.fix_jumped_stamp = fix_msg.header.stamp

        if self.forced_fix is not None and not fix_is_jumping:
            forced_x, forced_y = self.forced_fix.easting, self.forced_fix.northing
            distance = np.linalg.norm([x - forced_x, y - forced_y])
            dt = (fix_msg.header.stamp - self.forced_fix.stamp).to_sec()
            dt = max(dt, 1.0)
            base_distance = math.sqrt(self.max_cov)
            jump_distance = base_distance + dt * self.max_velocity
            nonsense_distance = base_distance + dt * self.nonsense_velocity
            if distance > nonsense_distance:
                self.state = NavSatFixQuality.STATE_NO_FIX
                fix_quality_msg.comments.append("Nonsensical distance from manually specified coordinates.")
            elif distance > jump_distance:
                self.state = NavSatFixQuality.STATE_FIX_RECONVERGING
                self.fix_regained_stamp = fix_msg.header.stamp
                fix_quality_msg.comments.append("Large distance from manually specified coordinates.")

        self.last_fix = UtmFix(x, y, fix_msg.header.stamp)

        if self.state != NavSatFixQuality.STATE_HAS_FIX:
            fix_quality_msg.state = self.state
            return None, fix_quality_msg

        cov = list(fix_msg.position_covariance)
        corrections_age = rospy.Time.now() - status_msg.last_corrections_time
        has_corrections = corrections_age < self.max_corrections_age and not status_msg.last_corrections_time.is_zero()

        fix_quality = NavSatFixQuality.QUALITY_OK
        if not has_corrections:
            fix_quality = max(fix_quality, NavSatFixQuality.QUALITY_DEGRADED)
            last_seen_str = "last seen %f s ago" % (corrections_age.to_sec(),) \
                if not status_msg.last_corrections_time.is_zero() else "never received"
            fix_quality_msg.comments.append("RTK corrections not available (%s)." % (last_seen_str,))
        if status_msg.satellites_used < 4:
            fix_quality = max(fix_quality, NavSatFixQuality.QUALITY_BAD)
            fix_quality_msg.comments.append("Only 4 satellites seen.")
        elif status_msg.satellites_used < 5:
            fix_quality = max(fix_quality, NavSatFixQuality.QUALITY_DEGRADED)
            fix_quality_msg.comments.append("Only 5 satellites seen.")
        elif status_msg.satellites_used < 15:
            fix_quality = max(fix_quality, NavSatFixQuality.QUALITY_AVERAGE)
            fix_quality_msg.comments.append("Less than 15 satellites seen.")
        if status_msg.integer_ambiguity_ratio < 1:
            fix_quality = max(fix_quality, NavSatFixQuality.QUALITY_DEGRADED)
            fix_quality_msg.comments.append("Integer ambiguity resolution ratio too low.")
        elif status_msg.integer_ambiguity_ratio < 1.8:
            fix_quality = max(fix_quality, NavSatFixQuality.QUALITY_AVERAGE)
            fix_quality_msg.comments.append("Integer ambiguity resolution ratio not good.")
        if fix_msg.status.status == NavSatStatus.STATUS_NO_FIX:
            fix_quality = max(fix_quality, NavSatFixQuality.QUALITY_BAD)
            fix_quality_msg.comments.append("No fix.")
        if max(cov[0], cov[4]) > self.max_cov:
            fix_quality = max(fix_quality, NavSatFixQuality.QUALITY_BAD)
            fix_quality_msg.comments.append("Fix covariance is too high.")
        if fix_is_jumping:
            fix_quality = max(fix_quality, NavSatFixQuality.QUALITY_BAD)
            fix_quality_msg.comments.append("Fix jumping distance is high.")

        if fix_quality == NavSatFixQuality.QUALITY_BAD:
            fix_quality_msg.state = self.state
            fix_quality_msg.quality = fix_quality
            return None, fix_quality_msg

        min_lat_cov = self.min_fix_lat_cov if fix_msg.status.status in RTK_FIX_STATUSES else self.min_float_lat_cov
        min_lon_cov = self.min_fix_lon_cov if fix_msg.status.status in RTK_FIX_STATUSES else self.min_float_lon_cov
        min_alt_cov = self.min_fix_alt_cov if fix_msg.status.status in RTK_FIX_STATUSES else self.min_float_alt_cov

        multiplier = self.cov_multipliers[fix_quality]

        if self.fix_jumped_stamp is not None:
            jump_age = fix_msg.header.stamp - self.fix_jumped_stamp
            if jump_age > self.fix_reconvergence_duration:
                self.fix_jumped_stamp = None
            elif fix_quality in (NavSatFixQuality.QUALITY_AVERAGE, NavSatFixQuality.QUALITY_DEGRADED):
                multiplier *= (1.0 - jump_age.to_sec() / self.fix_reconvergence_duration.to_sec()) * 10.0

        cov[0] = multiplier * max(cov[0], min_lat_cov)
        cov[4] = multiplier * max(cov[4], min_lon_cov)
        cov[8] = multiplier * max(cov[8], min_alt_cov)
        fix_msg.position_covariance = tuple(cov)

        fix_quality_msg.quality = fix_quality
        fix_quality_msg.state = self.state
        fix_quality_msg.covariance_multiplier = multiplier

        return fix_msg, fix_quality_msg

    def force_pose_cb(self, pose_msg):
        """Callback for rviz marker that sets the robot pose.

        :param PoseStamped pose_msg: 
        """
        if pose_msg.header.frame_id != "utm":
            rospy.logerr("Topic %s needs to contain messages in utm frame, but a message in frame %s was received!" % (
                self.force_pose_sub.resolved_name, pose_msg.header.frame_id))
            return
        self.forced_fix = UtmFix(pose_msg.pose.position.x, pose_msg.pose.position.y, pose_msg.header.stamp)

    @staticmethod
    def run():
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node("nav_sat_fix_filter")
    node = NavSatFixFilter()
    node.run()
