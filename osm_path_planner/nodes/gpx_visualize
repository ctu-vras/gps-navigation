#!/usr/bin/env python

# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Czech Technical University in Prague

"""Visualize a WGS84 trajectory saved in GPX format as a ROS :class:`nav_msgs.msg.Path` message.

Command-line arguments:
 - `GPX_FILE` (string): Path to the GPX file to read. Either this argument or ROS parameter `~gpx_file` have to be
                        specified.

ROS parameters:
 - `~gpx_file` (string): Path to the GPX file to read. Either this ROS parameter or the positional argument have to be
                         specified.
 - `~circular` (bool, default False): Whether last point should be connected with the first one.
 - `~reverse` (bool, default False): Whether to reverse the path.
 - `~z_offset` (float, default 0.0): Offset of altitude to add to the read waypoints.
 - `~skip_start` (int, default 0): How many waypoints to skip from the start
                                   (applied after `reverse` and before `circular`).
 - `~skip_end` (int, default 0): How many waypoints to skip from the end
                                 (applied after `reverse` and before `circular`).
 - `~utm_zone` (int, optional): If set, specifies the UTM zone to use. If not set, all points are converted to the UTM
                                zone corresponding to the first point.
 - `~frame_id` (string, default "utm"): Frame ID to use in the :class:`nav_msgs.msg.Path` message.
 - `~path_frame_id` (string, default is the frame read from `frame_id`): To correctly display :class:`nav_msgs.msg.Path`
    in RViz with the large float values that can be found in UTM coords, the path has to be expressed in a frame that
    yields lower float coordinates. Consider specifying a more local fixed frame here, and the node will convert the
    path to this other frame. The conversion of each point is only done once when it is added, and after each time jump.
    A good candidate for this frame is `utm_local` or `gps_odom` if it is available.

Published topics:
 - `~gpx_path` (:class:`nav_msgs.msg.Path`, latched): The converted path.
 - `/tf`, `/tf_static`: If `~path_frame_id` differs from `~frame_id`.
"""

from __future__ import print_function

import gpxpy
import numpy as np
import sys
import utm

import rospy
from tf2_ros import Buffer, TransformListener, TransformException
# noinspection PyUnresolvedReferences
import tf2_geometry_msgs

from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Path
from std_msgs.msg import Header

import cras


def gpx_to_path_msg(gpx_file, header, circular=False, reverse=False, z_offset=0.0, skip_start=0, skip_end=0,
                    utm_zone=None):
    """Convert the given GPX file to a Path message.

    :param str gpx_file: The GPX file to read.
    :param Header header: The header to assign to each point on the path and to the path itself.
    :param bool circular: Whether last point should be connected with the first one.
    :param bool reverse: Whether to reverse the path.
    :param float z_offset: Offset of altitude to add to the read waypoints.
    :param int skip_start: How many waypoints to skip from the start (applied after `reverse` and before `circular`).
    :param int skip_end: How many waypoints to skip from the end (applied after `reverse` and before `circular`).
    :param int|None utm_zone: If not None, specifies the UTM zone to use. If None, all points are converted to the UTM
                              zone corresponding to the first point.
    :return: Tuple containing the created message, UTM zone number and length of the path in meters.
    :rtype: Tuple[Path, int, float]
    """
    msg = Path()
    msg.header = header
    with open(gpx_file, 'r') as gpx_f:
        gpx_object = gpxpy.parse(gpx_f)
        indices = range(len(gpx_object.waypoints))
        if reverse:
            indices = reversed(indices)
        indices = list(indices)
        end = len(indices) if skip_end == 0 else -skip_end
        indices = indices[skip_start:end]

        if len(indices) == 0:
            return msg, 0, 0.0

        path_length = 0.0

        first_pose = None
        prev_waypoint = None
        for i in indices:
            waypoint = gpx_object.waypoints[i]
            pose = PoseStamped()
            pose.header = header
            pose.pose.orientation.w = 1
            cartesian_x, cartesian_y, utm_zone, _ = utm.from_latlon(waypoint.latitude, waypoint.longitude, utm_zone)
            pose.pose.position.x = cartesian_x
            pose.pose.position.y = cartesian_y
            pose.pose.position.z = z_offset + (waypoint.elevation if waypoint.elevation is not None else 0)
            msg.poses.append(pose)
            if first_pose is None:
                first_pose = pose
            if prev_waypoint is not None:
                path_length += np.linalg.norm([cartesian_x - prev_waypoint[0], cartesian_y - prev_waypoint[1]])
            prev_waypoint = (cartesian_x, cartesian_y)
        if circular:
            msg.poses.append(first_pose)
            if prev_waypoint is not None:
                path_length += np.linalg.norm(
                    [first_pose.pose.position.x - prev_waypoint[0], first_pose.pose.position.y - prev_waypoint[1]])

    return msg, utm_zone, path_length


class GpxVisualizer(cras.Node):

    def __init__(self, gpx_file):
        super(GpxVisualizer, self).__init__()

        self._gpx_file = gpx_file if gpx_file is not None else cras.get_param("~gpx_file")
        self._circular = cras.get_param("~circular", False)
        self._reverse = cras.get_param("~reverse", False)
        self._z_offset = cras.get_param("~z_offset", 0.0)
        self._skip_start = cras.get_param("~skip_start", 0)
        self._skip_end = cras.get_param("~skip_end", 0)
        self._utm_zone = None
        if rospy.has_param('~utm_zone'):
            self._utm_zone = cras.get_param('~utm_zone', result_type=int)
        self._frame_id = cras.get_param("~frame_id", "utm")
        self._path_frame_id = cras.get_param('~path_frame_id', self._frame_id)

        needs_tf = self._path_frame_id != self._frame_id
        if needs_tf:
            self._tf = Buffer()
            self._tf_listener = TransformListener(self._tf)

        self._pub = rospy.Publisher("~gpx_path", Path, latch=True, queue_size=1)

        self._header = Header()
        self._header.stamp = rospy.Time.now()
        self._header.frame_id = self._frame_id

        self._msg, self._utm_zone, path_length = gpx_to_path_msg(
            self._gpx_file, self._header, self._circular, self._reverse, self._z_offset,
            self._skip_start, self._skip_end, self._utm_zone)

        if len(self._msg.poses) == 0:
            rospy.logwarn("Parsed empty path from file " + self._gpx_file)
        else:
            path_length_km = path_length / 1000.0
            rospy.loginfo("Parsed %i waypoints (%.2f km long) in UTM zone %i from file %s" % (
                len(self._msg.poses), path_length_km, self._utm_zone, self._gpx_file))

        self._timer = None

    def update_and_publish_message(self):
        now = rospy.Time.now()

        # self._msg header and individual waypoint headers are all pointers to this instance, so changing the stamp here
        # is enough, and we do not need to traverse the whole path
        self._header.stamp = now

        msg = self._msg

        if self._frame_id != self._path_frame_id:
            # Wait until the transform is available
            waited = False
            while not rospy.is_shutdown():
                can_transform, error = self._tf.can_transform(
                    self._path_frame_id, self._frame_id, now, rospy.Duration(1), return_debug_tuple=True)
                if can_transform:
                    if waited:
                        rospy.loginfo("Transform found.")
                    break
                else:
                    if not waited:
                        rospy.logwarn("Cannot transform path from frame %s to %s. Waiting... The error was: %s." % (
                            self._frame_id, self._path_frame_id, error))
                    waited = True

            m = self._msg
            msg = Path()
            msg.header.stamp = m.header.stamp
            msg.header.frame_id = self._path_frame_id
            for pose_stamped in m.poses:
                try:
                    pose_transformed = self._tf.transform(pose_stamped, self._path_frame_id)
                    msg.poses.append(pose_transformed)
                except TransformException as e:
                    rospy.logerr("Error transforming path point: " + str(e))

        self._pub.publish(msg)

    def timer_cb(self, _):
        self.update_and_publish_message()

    def run(self):
        self.start_auto_check_time_jump()  # call reset() if time jumps

        # Update and publish the path message as soon as we get valid ROS time
        self._timer = rospy.Timer(rospy.Duration(0, 1), self.timer_cb, oneshot=True, reset=True)

        rospy.spin()

        if self._timer:
            self._timer.shutdown()
            self._timer.join()

    def reset(self):
        """Reset state of the class to the state where it was just after initialization."""
        if self._timer:
            self._timer.shutdown()

        self.update_and_publish_message()

        super(GpxVisualizer, self).reset()


if __name__ == "__main__":
    argv = rospy.myargv(sys.argv)

    if len(argv) > 2:
        print("Wrong number of arguments passed.\nUsage: gpx_visualize [PATH_TO_GPX_FILE|_gpx_file:=PATH_TO_GPX_FILE] "
              "[_circular:=0] [_reverse:=0] [_skip_start:=0] [_skip_end:=0] [_utm_zone:=42] [_frame_id:=utm] "
              "[_path_frame_id:=utm]",
              file=sys.stderr)
        sys.exit(1)

    rospy.init_node("gpx_visualize")

    vis = GpxVisualizer(argv[1] if len(sys.argv) == 2 else None)
    vis.run()
