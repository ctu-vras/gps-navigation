#!/usr/bin/env python
import time

import rospy
from std_msgs.msg import String
from gps_to_path.msg import MagShift
from sensor_msgs.msg import MagneticField


class MagShiftCalc:
    def __init__(self):

        self.x_min = 10000
        self.y_min = 10000
        self.z_min = 10000

        self.x_max = -10000
        self.y_max = -10000
        self.z_max = -10000

        self.x_mean = None
        self.y_mean = None
        self.z_mean = None

        self.msg = MagShift()
        self.msg2 = MagneticField()

        self.frame_id = "imu"
        self.started = False

        self.measuring_time = rospy.Duration(rospy.get_param('~measuring_time', 30))
        self.load_from_params = rospy.get_param("~load_from_params", False)
        self.load_from_params = self.load_from_params and rospy.has_param("magnetometer_bias_x")
        self.load_from_params = self.load_from_params and rospy.has_param("magnetometer_bias_y")
        self.load_from_params = self.load_from_params and rospy.has_param("magnetometer_bias_z")

        self.pub = rospy.Publisher('mag_shift', MagShift, latch=True, queue_size=1)  # deprecated
        self.pub2 = rospy.Publisher('imu/mag_bias', MagneticField, latch=True, queue_size=1)
        self.speak_pub = rospy.Publisher('speak/warn', String, queue_size=1)

        if not self.load_from_params:
            self.sub = rospy.Subscriber('imu/mag', MagneticField, self.mag_callback)
        else:
            self.x_mean = float(rospy.get_param("magnetometer_bias_x"))
            self.y_mean = float(rospy.get_param("magnetometer_bias_y"))
            self.z_mean = float(rospy.get_param("magnetometer_bias_z"))
            time.sleep(0.01)  # give the publishers some time to get set up
            self.pub_msg()
            rospy.logwarn("Magnetometer calibration loaded from parameters.")

    def speak(self, message):
        msg = String()
        msg.data = message
        self.speak_pub.publish(msg)

    def mag_callback(self, msg):
        self.frame_id = msg.header.frame_id

        if not self.started and rospy.Time.now().is_zero():
            return

        if not self.started:
            self.started = True
            self.finish_measuring_time = rospy.Time.now() + self.measuring_time

            log = "Started magnetometer calibration, rotate the robot several times in the following %i seconds." % \
                (self.measuring_time.secs,)
            rospy.logwarn(log)
            self.speak(log)

        if rospy.Time.now() < self.finish_measuring_time:
            mag = msg.magnetic_field

            if mag.x > self.x_max:
                self.x_max = mag.x
            elif mag.x < self.x_min:
                self.x_min = mag.x

            if mag.y > self.y_max:
                self.y_max = mag.y
            elif mag.y < self.y_min:
                self.y_min = mag.y

            if mag.z > self.z_max:
                self.z_max = mag.z
            elif mag.z < self.z_min:
                self.z_min = mag.z
        else:
            rospy.logwarn("Magnetometer calibrated")
            self.speak("Magnetometer calibrated")
            self.sub.unregister()  # unsubscribe the mag messages

            self.set_means()
            self.pub_msg()

    def set_means(self):
        self.x_mean = (self.x_min + self.x_max)/2
        self.y_mean = (self.y_min + self.y_max)/2
        self.z_mean = (self.z_min + self.z_max)/2

    def pub_msg(self):
        self.msg.header.stamp = rospy.Time.now()
        self.msg.header.frame_id = self.frame_id

        self.msg2.header = self.msg.header

        self.msg.x_mean = self.msg2.magnetic_field.x = self.x_mean
        self.msg.y_mean = self.msg2.magnetic_field.y = self.y_mean
        self.msg.z_mean = self.msg2.magnetic_field.z = self.z_mean

        self.pub.publish(self.msg)
        self.pub2.publish(self.msg2)

        rospy.set_param("magnetometer_bias_x", self.x_mean)
        rospy.set_param("magnetometer_bias_y", self.y_mean)
        rospy.set_param("magnetometer_bias_z", self.z_mean)

    def run(self):
        rospy.spin()


def main():
    rospy.init_node('mag_shift')
    node = MagShiftCalc()
    node.run()


if __name__ == '__main__':
    main()
