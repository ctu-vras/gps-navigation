#!/usr/bin/env python

"""
This node serves purely for vizualization of OSM data in rviz. 

Probably could be optimized, but runs fast enough.
"""

from __future__ import division
import rospy
import utm
import numpy as np
import ros_numpy
import tf2_ros
from sensor_msgs.msg import NavSatFix, PointCloud2
from stamped_msgs.msg import Float64
from geometry_msgs.msg import Point, Quaternion, PoseStamped, Pose
import std_msgs.msg
from math import sin, cos, pi
from tf.transformations import quaternion_from_euler, quaternion_multiply, euler_from_quaternion, quaternion_inverse
from numpy import deg2rad
import osm_types
import time

class OsmToPcd:
    def __init__(self, odom_frame):
        self.odom_frame = odom_frame

        self.osm_pcd = {}

        self.osm_points = { 'roads':np.array([]).reshape((0,2)),
                            'untraversables':np.array([]).reshape((0,2)),
                            'footways':np.array([]).reshape((0,2)),
                            'all_goal_points':np.array([]).reshape((0,2))
                            }
        
        self.osm_colors = { 'roads':[0,0,0.9],
                            'untraversables':[0.9,0,0],
                            'footways':[0,0.9,0],
                            'all_goal_points':[0.9,0.9,0],
                            }

        self.trav = {   'roads':5,
                        'untraversables':4,
                        'footways':1,
                        'all_goal_points':100
                        }

        self.osm_pcd_utm = None
        self.sub_osm_pcd_utm = rospy.Subscriber("osm_pcd_utm", PointCloud2, self.handle_osm_pcd_utm, queue_size=10)

        self.tfBuffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tfBuffer)
        self.odom_gps_trans = None
        self.odom_base_link_trans = None
        
        self.gps_utm = None
        self.sub_fix = rospy.Subscriber(
            "fix", NavSatFix, self.update_fix, queue_size=10)

        self.sub_azimuth = rospy.Subscriber(
            "mag_azimuth", Float64, self.update_azimuth, queue_size=10)
        self.azimuth = 0.        

        """ Publish osm objects as pcd. """
        self.pub_osm = rospy.Publisher('osm_pcd', PointCloud2, queue_size=10)
        self.osm_pcd_msg = PointCloud2()
        

    def handle_osm_pcd_utm(self,msg):
        """ OSM PCD UTM sub handler. Should be triggered once (osm_pcd_utm should be published once and latched). """
        self.osm_pcd_utm = ros_numpy.numpify(msg).ravel()

        for key in self.osm_points:
            self.osm_points[key] = np.array(self.osm_pcd_utm[np.where(self.osm_pcd_utm[:]['type'] == osm_types.OSM_TYPES[key])[0]][['x','y']].tolist())
            
    def update_osm_points(self):
        """ Transform to odom frame. """
        # utm is not an actual tf trame, just an imaginary frame
        for key in self.osm_points:

            if self.osm_points[key].size > 0:

                gps_to_target_utm_frame = self.osm_points[key] - \
                    np.array([self.gps_utm[0], self.gps_utm[1]])

                gps_to_target_odom_frame = self.utm_to_odom_rotate(
                    gps_to_target_utm_frame)

                self.osm_pcd[key] = np.array([gps_to_target_odom_frame[:, 0] + self.odom_gps_trans.transform.translation.x,
                    gps_to_target_odom_frame[:, 1] + self.odom_gps_trans.transform.translation.y]).T

    def update_azimuth(self, msg):
        """ Azimuth sub handler. """
        self.azimuth = msg.data
    
    def update_fix(self, msg):
        """ Fix sub handler. """
        self.gps_utm = utm.from_latlon(msg.latitude, msg.longitude)

    def get_utm_odom_rot(self):
        """ Get angle by how much to rotate utm frame to align with odom frame, resp. rotation of odom frame in utm frame. """
        q1 = quaternion_from_euler(0, 0, deg2rad(
            self.azimuth)-(3./2.)*pi)   # how much to rotate utm frame to be aligned with base_link frame
        q2 = quaternion_inverse([0,
                                 0,
                                 self.odom_base_link_trans.transform.rotation.z,
                                 self.odom_base_link_trans.transform.rotation.w])    # how much to rotate base link frame to be aligned with odom frame

        # how much to rotate utm frame to be aligned with odom frame
        q = quaternion_multiply(q2, q1)
        return q

    def utm_to_odom_rotate(self, arr):
        """ Got working by trial and error -- might not be super cleanly written. """
        utm_to_odom_q = self.get_utm_odom_rot()
        odom_to_utm_q = quaternion_inverse(utm_to_odom_q)
        odom_to_utm_angle = euler_from_quaternion(odom_to_utm_q)[2]
        x_rot = arr[:, 0]*cos(odom_to_utm_angle) - \
            arr[:, 1]*sin(odom_to_utm_angle)
        y_rot = arr[:, 0]*sin(odom_to_utm_angle) + \
            arr[:, 1]*cos(odom_to_utm_angle)
        return np.array([x_rot, y_rot]).T

    def main_cycle(self):
        """ Publishing OSM points as pcd in odom frame. """
        if self.odom_gps_trans and self.odom_base_link_trans:
            try:
                self.odom_gps_trans = self.tfBuffer.lookup_transform(
                    self.odom_frame, 'gps', rospy.Time())
            except:
                pass
            try:
                self.odom_base_link_trans = self.tfBuffer.lookup_transform(
                    self.odom_frame, 'base_link', rospy.Time())
            except:
                pass

            if self.gps_utm is not None and self.osm_pcd_utm is not None:
                rospy.logwarn_once("OK. Publishing OSM PCD.")
                self.update_osm_points()              
                
                self.set_pcd_msg()
                self.pub_osm.publish(self.osm_pcd_msg)
            else:
                rospy.logwarn_once("No fix or OSM PCD UTM yet.")
        else:
            rospy.logwarn_once(
                "TF(odom,gps) or TF(odom,base_link) is missing.")

    def get_pose(self, point):
        x = point[0]
        y = point[1]

        point = Point()
        quat = Quaternion()
        pose_ob = Pose()
        point.x = x
        point.y = y
        # set height equal to base_link (for good vizualization in rviz)
        point.z = self.odom_base_link_trans.transform.translation.z
        quat.x = 0.
        quat.y = 0.
        quat.z = 0.
        quat.w = 1.
        pose_ob.position = point
        pose_ob.orientation = quat
        return pose_ob

    def get_pose_stamped(self, point):
        pose = self.get_pose(point)
        pose_stamped = PoseStamped()
        pose_stamped.pose = pose
        return pose_stamped

    def set_pcd_msg(self):

        self.pcd_data = np.zeros(0, dtype=[
                ('x', np.float32),
                ('y', np.float32),
                ('z', np.float32),
                ('r', np.float32),
                ('g', np.float32),
                ('b', np.float32),
                ('trav', np.uint8)])

        for key in self.osm_pcd:
            odm_pcd_data = np.zeros(len(self.osm_pcd[key]), dtype=[
                ('x', np.float32),
                ('y', np.float32),
                ('z', np.float32),
                ('r', np.float32),
                ('g', np.float32),
                ('b', np.float32),
                ('trav', np.uint8)])

            odm_pcd_data['x'] = self.osm_pcd[key][:, 0]
            odm_pcd_data['y'] = self.osm_pcd[key][:, 1]
            odm_pcd_data['z'] = np.zeros((self.osm_pcd[key][:, 1].shape))
            odm_pcd_data['r'] = self.osm_colors[key][0]
            odm_pcd_data['g'] = self.osm_colors[key][1]
            odm_pcd_data['b'] = self.osm_colors[key][2]
            odm_pcd_data['trav'] = self.trav[key]

            self.pcd_data = np.concatenate([self.pcd_data, odm_pcd_data])

        self.osm_pcd_msg = ros_numpy.msgify(PointCloud2, self.pcd_data)

        header = std_msgs.msg.Header()
        header.stamp = rospy.Time.now()
        header.frame_id = self.odom_frame

        self.osm_pcd_msg.header = header

    def run(self):
        rate = rospy.Rate(10)

        while (not self.odom_gps_trans) or (not self.odom_base_link_trans):
            try:
                self.odom_gps_trans = self.tfBuffer.lookup_transform(
                    self.odom_frame, 'gps', rospy.Time())
                self.odom_base_link_trans = self.tfBuffer.lookup_transform(
                    self.odom_frame, 'base_link', rospy.Time())
            except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
                rate.sleep()
                continue
        rospy.loginfo("Transformations obtained.")

        while not rospy.is_shutdown():
            self.main_cycle()
            rate.sleep()


def main():
    rospy.init_node('osm_to_pcd_for_path_planner')

    odom_frame = rospy.get_param('~odom_frame', "gps_odom")

    osm_to_pcd = OsmToPcd(odom_frame)

    osm_to_pcd.run()

if __name__ == '__main__':
    main()
