#!/usr/bin/env python

import math
import rospy

from gps_to_path.msg import NavSatDetailedStatus
from sensor_msgs.msg import NavSatFix
from sound_play.libsoundplay import SoundClient


class SoundFixCov():
    def __init__(self, sound_period):
        self.sound_handle = SoundClient()
        self.last_sound_time = 0
        self.last_msg_time = rospy.Time.now().to_sec()
        self.last_correction_time = rospy.Time(0)
        self.last_num_satellites = -1
        self.require_corrections = rospy.get_param("~require_corrections", True)
        self.sound_period = sound_period
        self.sound_string = "Fix covariance is {}."
        self.no_fix_msg_period = 1

        self.sub_llh = rospy.Subscriber('fix', NavSatFix, self.fix_handle, queue_size=10)
        self.sub_details = rospy.Subscriber('fix_status', NavSatDetailedStatus, self.details_handle, queue_size=10)

    def fix_handle(self,msg):
        if rospy.Time.now().to_sec() - self.last_sound_time >= self.sound_period:
            self.last_sound_time = rospy.Time.now().to_sec()

            long_cov = msg.position_covariance[0]
            lat_cov = msg.position_covariance[4]

            pdop = math.sqrt(long_cov**2 + lat_cov**2)

            if pdop < 1:
                pdop_str = "under one meter"
            else:
                pdop_str = str(round(pdop))

            message = self.sound_string.format(pdop_str)

            corrections_age = rospy.Time.now() - self.last_correction_time
            if self.require_corrections and corrections_age > rospy.Duration(4, 0):
                message += " No corrections!"

            if 0 <= self.last_num_satellites < 4:
                message += " Only {} satellite{}!".format(
                    self.last_num_satellites, "s" if self.last_num_satellites > 1 else "")

            voice_msg = self.sound_handle.voiceSound(message)
            rospy.loginfo(message)
            voice_msg.play()

        self.last_msg_time = rospy.Time.now().to_sec()

    def details_handle(self, msg):
        self.last_correction_time = msg.last_corrections_time
        self.last_num_satellites = msg.satellites_used

    def run(self):
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            if rospy.Time.now().to_sec() - self.last_msg_time >= self.no_fix_msg_period:
                self.last_msg_time = rospy.Time.now().to_sec()
                self.no_fix_msg_period = self.sound_period

                voice_msg = self.sound_handle.voiceSound("No fix.")
                rospy.loginfo("No fix.")
                voice_msg.play()
            rate.sleep()


def main():
    rospy.init_node('sound_fix_cov')

    sound_period = rospy.get_param('~sound_period', 10)

    node = SoundFixCov(sound_period)
    node.run()


if __name__ == '__main__':
    main()
