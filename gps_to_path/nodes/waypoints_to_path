#!/usr/bin/env python

"""
This node is the final part of the planner pipeline.
Publishes path for path_follower in the correct frame.

Runs well and probably cannot be optimized much more.
"""

import rospy
import tf2_ros
from nav_msgs.msg import Path
from sensor_msgs.msg import NavSatFix
from stamped_msgs.msg import Float64
from geometry_msgs.msg import Point, Quaternion, PoseStamped, Pose
from gps_to_path.msg import Waypoints
import std_msgs.msg
from geodesy import utm
from math import sin, cos, pi
from tf.transformations import quaternion_from_euler, quaternion_multiply, euler_from_quaternion, quaternion_inverse
from numpy import deg2rad
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_matrix


MAX_DIST_FROM_START = 3.

class WaypointsToPath():
    def __init__(self,odom_frame):

        self.odom_frame = odom_frame

        self.waypoints = None

        self.sub_path_waypoints = rospy.Subscriber(
            "path_waypoints", Waypoints, self.update_waypoints, queue_size=10)

        self.sub_original_waypoints = rospy.Subscriber(
            'original_waypoints', Waypoints, self.original_waypoints_to_path, queue_size=10)

        self.sub_processed_waypoints = rospy.Subscriber(
            'processed_waypoints', Waypoints, self.processed_waypoints_to_path, queue_size=10)

        self.gps_utm = None
        self.sub_fix = rospy.Subscriber(
            "fix", NavSatFix, self.update_fix, queue_size=10)

        self.sub_azimuth = rospy.Subscriber(
            "mag_azimuth", Float64, self.update_azimuth, queue_size=10)
        self.azimuth = 0.

        self.pub_path = rospy.Publisher('path', Path, queue_size=10)
        self.path_msg = Path()

        self.pub_path_utm = rospy.Publisher('path_utm', Path, queue_size=10)
        self.path_utm_msg = Path()

        self.pub_original_waypoints_path = rospy.Publisher('original_waypoints_path', Path, queue_size=10, latch=True)

        self.pub_processed_waypoints_path = rospy.Publisher('processed_waypoints_path', Path, queue_size=10, latch=True)

        self.tfBuffer = tf2_ros.Buffer()
        self.listener_odom_gps = tf2_ros.TransformListener(self.tfBuffer)
        self.odom_gps_trans = None

        self.tfBuffer2 = tf2_ros.Buffer()
        self.listener_odom_base_link = tf2_ros.TransformListener(
            self.tfBuffer2)
        self.odom_base_link_trans = None


        self.tfBuffer3 = tf2_ros.Buffer()
        self.listener_odom_utm = tf2_ros.TransformListener(
            self.tfBuffer3)
        self.odom_utm_trans = None

    def update_waypoints(self,msg):
        """ Waypoints sub handler. """
        self.waypoints = np.array([[p.x,p.y] for p in msg.points])
        
        if self.odom_base_link_trans is not None:
            self.path_utm_msg = self.set_path_msg(self.waypoints, "utm")
            self.pub_path_utm.publish(self.path_utm_msg)

    def update_azimuth(self, msg):
        """ Azimuth sub handler. """
        self.azimuth = msg.data
    
    def original_waypoints_to_path(self,msg):
        points = np.array([[p.x,p.y] for p in msg.points])

        if self.odom_base_link_trans is not None:
            path_msg = self.set_path_msg(points, "utm")
            self.pub_original_waypoints_path.publish(path_msg)

    def processed_waypoints_to_path(self,msg):
        points = np.array([[p.x,p.y] for p in msg.points])

        if self.odom_base_link_trans is not None:
            path_msg = self.set_path_msg(points, "utm")
            self.pub_processed_waypoints_path.publish(path_msg)

    def rotate(self,points,trans):
        R = quaternion_matrix([trans.transform.rotation.x,
                                    trans.transform.rotation.y,
                                    trans.transform.rotation.z,
                                    trans.transform.rotation.w])   
        R = R[:2,:2]
        points = np.matmul(R,points.T)
        points = points.T
        return points

    def transform_points(self,points,trans):
        points = self.rotate(points,trans)
        points[:,0] += trans.transform.translation.x
        points[:,1] += trans.transform.translation.y
        return points

    def get_utm_odom_rot(self):
        """ Get angle by how much to rotate utm frame to align with odom frame, resp. rotation of odom frame in utm frame. """
        q1 = quaternion_from_euler(0, 0, deg2rad(
            self.azimuth)-(3./2.)*pi)   # how much to rotate utm frame to be aligned with base_link frame
        q2 = quaternion_inverse([0,
                                 0,
                                 self.odom_base_link_trans.transform.rotation.z,
                                 self.odom_base_link_trans.transform.rotation.w])    # how much to rotate base link frame to be aligned with odom frame

        q = quaternion_multiply(q2, q1) # how much to rotate utm frame to be aligned with odom frame
        return q

    def utm_to_odom_rotate(self, arr):
        """ This works but I am confused by all the rotations so I can't tell you much more, sorry. """
        utm_to_odom_q = self.get_utm_odom_rot()
        odom_to_utm_q = quaternion_inverse(utm_to_odom_q)
        odom_to_utm_angle = euler_from_quaternion(odom_to_utm_q)[2]
        x_rot = arr[:, 0]*cos(odom_to_utm_angle) - \
            arr[:, 1]*sin(odom_to_utm_angle)
        y_rot = arr[:, 0]*sin(odom_to_utm_angle) + \
            arr[:, 1]*cos(odom_to_utm_angle)
        return np.array([x_rot, y_rot]).T

    def update_fix(self, msg):
        """ Fix sub handler. """
        self.gps_utm = utm.fromLatLong(msg.latitude, msg.longitude)

    def main_cycle(self):
        """ Main cycle of node. Handles publishing of path. """
        if self.odom_gps_trans and self.odom_base_link_trans:
            try:
                self.odom_gps_trans = self.tfBuffer.lookup_transform(
                    self.odom_frame, 'gps', rospy.Time())
            except:
                pass
            try:
                self.odom_base_link_trans = self.tfBuffer2.lookup_transform(
                    self.odom_frame, 'base_link', rospy.Time())
            except:
                pass
            try:
                self.odom_utm_trans = self.tfBuffer3.lookup_transform(
                    self.odom_frame, 'utm', rospy.Time())
            except:
                pass

            if self.waypoints is not None and self.waypoints.size > 0 and self.gps_utm is not None:                
                rospy.loginfo_once("OK publishing waypoints.")
                #self.gps_to_target_utm_frame = self.waypoints - \
                #    np.array([self.gps_utm.easting, self.gps_utm.northing])
                #self.gps_to_target_odom_frame = self.utm_to_odom_rotate(
                #    self.gps_to_target_utm_frame)

                #self.path_arr = np.array([self.gps_to_target_odom_frame[:, 0] + self.odom_gps_trans.transform.translation.x,
                #                        self.gps_to_target_odom_frame[:, 1] + self.odom_gps_trans.transform.translation.y]).T
                self.waypoints = self.transform_points(self.waypoints,self.odom_utm_trans)
                self.path_msg = self.set_path_msg(self.waypoints, self.odom_frame)
                self.pub_path.publish(self.path_msg)
            else:
                rospy.loginfo_once("No waypoints for path or no fix yet.")
        else:
            rospy.loginfo_once("TF(odom,gps) or TF(odom,base_link) is missing.")

    def get_pose(self, point):
        """ Point (x,y) to pose msg. """
        x = point[0]
        y = point[1]

        point = Point()
        quat = Quaternion()
        pose_ob = Pose()
        point.x = x
        point.y = y
        # set height equal to base_link, so that it is effectively ignored by path follower
        point.z = self.odom_base_link_trans.transform.translation.z
        quat.x = 0.
        quat.y = 0.
        quat.z = 0.
        quat.w = 1.
        pose_ob.position = point
        pose_ob.orientation = quat
        return pose_ob

    def get_pose_stamped(self, point):
        """ Point (x,y) to stamped pose msg. """
        pose = self.get_pose(point)
        pose_stamped = PoseStamped()
        pose_stamped.pose = pose
        return pose_stamped

    def set_path_msg(self, points, frame):
        """ Prepare path msg to be published. """
        poses = []

        header = std_msgs.msg.Header()
        header.stamp = rospy.Time.now()
        header.frame_id = frame

        msg = Path()

        for point in points:
            pose_stamped = self.get_pose_stamped(point)
            pose_stamped.header = header
            poses.append(pose_stamped)

        msg.header = header
        msg.poses = poses

        return msg

    def run(self):
        """ Run loop of object. """
        rate = rospy.Rate(10)

        while (not self.odom_gps_trans) or (not self.odom_base_link_trans):
            try:
                self.odom_gps_trans = self.tfBuffer.lookup_transform(
                    self.odom_frame, 'gps', rospy.Time())
                self.odom_base_link_trans = self.tfBuffer2.lookup_transform(
                    self.odom_frame, 'base_link', rospy.Time())
            except Exception as e:
                print(e)
                rate.sleep()
                continue
        rospy.loginfo("Transformations obtained.")
        
        while not rospy.is_shutdown():
            self.main_cycle()
            rate.sleep()

def main():
    rospy.init_node('waypoints_to_path')

    odom_frame = rospy.get_param('~odom_frame', 'odom')

    node = WaypointsToPath(odom_frame)

    node.run()


if __name__ == '__main__':
    main()
