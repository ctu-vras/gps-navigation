#!/usr/bin/env python

import rospy
import tf2_ros

from nav_msgs.msg import Path
from gps_to_path.msg import LlhFix
import geometry_msgs.msg
import std_msgs.msg
from sensor_msgs.msg import NavSatFix
from sound_play.msg import SoundRequest
from sound_play.libsoundplay import SoundClient

from geodesy import utm
import datetime
import time
import re
import serial
from math import sqrt, sin, cos

from tf.transformations import euler_from_quaternion


class GPSData():
    def __init__(self):
        self.time = 0.
        self.lat = 0.
        self.long = 0.
        self.fix = 0
        self.satellites = 0
        self.lat_cov = 0.
        self.long_cov = 0.

    def from_array(self, data):
        self.time = data[0]
        self.lat = float(data[1])
        self.long = float(data[2])
        self.alt = float(data[3])
        self.fix = data[4]
        self.satellites = data[5]
        self.lat_cov = float(data[6])**2
        self.long_cov = float(data[7])**2
        self.alt_cov = float(data[8])**2


class LlhToFix():
    def __init__(self):
        self.pub_path = rospy.Publisher('fix', NavSatFix, queue_size=10)    
        self.fix_msg = NavSatFix()
        self.gps_data = GPSData()

        self.sub_llh = rospy.Subscriber('llh', LlhFix, self.llh_handle, queue_size=10)

    def llh_handle(self,msg):
        llh_sentence = msg.data
        self.parse_data(llh_sentence)

        self.set_fix_msg()
        self.pub_path.publish(self.fix_msg)

    def set_fix_msg(self):
        header = std_msgs.msg.Header()
        header.stamp = rospy.Time.now()  # float(self.gps_data.time)
        header.frame_id = "gps"

        self.fix_msg.header = header

        self.fix_msg.latitude = self.gps_data.lat
        self.fix_msg.longitude = self.gps_data.long
        self.fix_msg.altitude = self.gps_data.alt

        self.fix_msg.status.status = 0
        self.fix_msg.status.service = 1

        self.fix_msg.position_covariance = [self.gps_data.long_cov, 0., 0.,
                                            0., self.gps_data.lat_cov, 0.,
                                            0., 0., self.gps_data.alt_cov]

    def date_to_timestamp(self, date):
        ts = time.mktime(datetime.datetime.strptime(
            date, "%Y/%m/%d,%H:%M:%S.%f").timetuple())
        return ts

    def parse_data(self, llh_sentence):
        llh_contents = re.sub(' +', ' ', llh_sentence).strip()
        llh_commas = llh_contents.replace(' ', ',')
        llh_arr = llh_commas.split(',')

        date = llh_arr[0]+','+llh_arr[1]
        ts = self.date_to_timestamp(date)
        ts = str(ts)
        llh_arr.pop(0)
        llh_arr[0] = ts
        self.gps_data.from_array(llh_arr)

    def run(self):
        rospy.spin()

def main():
    rospy.init_node('llh_to_fix')
    
    node = LlhToFix()
    node.run()


if __name__ == '__main__':
    main()
